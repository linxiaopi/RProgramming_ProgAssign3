data.frame(hospital = hosp)
data.frame(hospital = hosp2)
str(hosp2)
?names
unname(hosp2)
hosp2
hosp <- lapply(by_state, function(x) as.character( x[1 , 1]) )
hosp
hosp2 <- unlist(hosp)
hosp2
rm(hosp2)
unlist(hosp2)
hosp2 <- unlist(hosp)
hosp2
class(hosp2)
hosp2 <- data.frame(hospital = hosp2)
class(hosp2)
hosp2
hosp <- lapply(by_state, function(x) {
as.character( x[which(x[3] == max(x[3])) , 1] ) }
)
hosp2 <- sapply(by_state, function(x) {
as.character( x[which(x[3] == max(x[3])) , 1] ) }
)
hosp2
identical (hosp, hosp2)
rm(hosp2)
rm(hosp)
hosp2 <- sapply(by_state, function(x) {
as.character( x[which(x[3] == max(x[3])) , 1] ) }
)
hosp <- lapply(by_state, function(x) {
as.character( x[which(x[3] == max(x[3])) , 1] ) }
)
identical(hosp, hosp2)
rm(hosp2)
hosp2 <- unlist(unname(hosp))
hosp2 <- unlist(hosp, use.names = FALSE)
rm(hosp2)
hosp2 <- unlist(hosp, use.names = FALSE)
hosp2
hosp2 <- unlist(hosp, use.names = FALSE, recursive = FALSE)
hosp2 <- unlist(hosp, use.names = FALSE, recursive = TRUE)
hosp2 <- unlist(hosp, use.names = FALSE, recursive = FALSE)
rm(hosp2)
hosp2 <- unlist(hosp, use.names = FALSE, recursive = FALSE)
hosp <- lapply(by_state, function(x) as.character( x[1 , 1]) )
hosp2 <- unlist(hosp, use.names = FALSE, recursive = FALSE)
by_state$MI
x <- 1:10
sub <- sub[order(sub[ , 7], -sub[ , 11], sub$Hospital.Name) , ]
sub <- sub[order(sub[ , 7], sub[ , 11], decreasing = TRUE, sub$Hospital.Name) , ]
by_state
sub <- sub[order(sub[ , 7], sub-[ , 11], sub$Hospital.Name) , ]
sub <- sub[order(sub[ , 7], -sub[ , 11], sub$Hospital.Name) , ]
sub <- sub[order(sub[ , 7], -(sub[ , 11]), sub$Hospital.Name) , ]
sub <- sub[order(sub[ , 7], (sub[ , 11]), sub$Hospital.Name, decreasing = c(FALSE, TRUE, FALSE)) , ]
sub <- sub[order(sub[ , 7], (sub[ , 11]), sub$Hospital.Name, decreasing = c(FALSE, TRUE, FALSE), method = "radix") , ]
sub <- data[!is.na(data[ , 11]), ]
sub <- sub[order(sub[ , 7], (sub[ , 11]), sub$Hospital.Name) , ]
sub <- sub[order(sub[ , 7], -(sub[ , 11]), sub$Hospital.Name) , ]
sub <- sub[order(sub[ , 7], (sub[ , 11]), sub$Hospital.Name, decreasing = c(FALSE, TRUE, FALSE), method = "radix") , ]
sub <- sub[order(sub[ , 7], (sub[ , 11]), sub$Hospital.Name, decreasing = c(FALSE, TRUE, FALSE)) , ]
sub <- sub[order(sub[ , 7], -sub[ , 11], sub$Hospital.Name) , ]
sub <- sub[order(sub[ , 7], sub[ , 11], sub$Hospital.Name) , ]
sub
sub <- sub[ , c(2, 7, 11)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
by_state2 <- split(sub, sub$st)
sub <- data[!is.na(data[ , 11]), ]
sub <- sub[order(sub[ , 7], -sub[ , 11], sub$Hospital.Name) , ]
sub <- sub[ , c(2, 7, 11)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
by_state
by_state$WY
by_state2$WY
sub <- data[!is.na(data[ , 11]), ]
sub <- sub[order(sub[ , 7], sub[ , 11], sub$Hospital.Name) , ]
sub <- sub[ , c(2, 7, 11)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
hosp <- lapply(by_state, function(x) {
as.character( x[which(x[3] == max(x[3])) , 1] ) }
)
hosp
hosp <- lapply(by_state, function(x) as.character( x[1 , 1]) )
hosp
by_state
by_state$MI
sub <- data[!is.na(data[ , 11]), ]
sub <- sub[order(sub[ , 7], -sub[ , 11], sub$Hospital.Name) , ]
sub <- sub[ , c(2, 7, 11)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
hosp <- lapply(by_state, function(x) as.character( x[1 , 1]) )
by_state$MI
data.frame(hospital = unlist(hosp, use.names = FALSE))
hosp2 <- data.frame(hospital = unlist(hosp, use.names = FALSE))
hosp
hosp2
hosp2 <- data.frame(hospital = unlist(hosp, use.names = FALSE), state = names(hosp))
hosp2
rm(list=ls())
## Shows the hopital in each state that has the specified rank
## for the specified outcome;
## ties go to the hospital that comes first alphabetically
rankall <- function(outcome, num = "best") {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that "outcome" arg is valid
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# check that "rank" arg is valid
if (!(num == "best" | num == "worst" | num > 0)) {
stop("invalid num")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to remove NAs, order by state and outcome and alphabetize hospitals
sub <- data[!is.na(data[ , outcome]), ]
# reverse outcome order for num = "worst"
if (num = "worst") {
sub <- sub[order(sub$State, -sub[ , outcome], sub$Hospital.Name) , ]
}
sub <- sub[order(sub$State, sub[ , outcome], sub$Hospital.Name) , ]
# subset to required columns; rename columns, add split (by state)
sub <- sub[ , c(2, 7, outcome)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
# get list of hospitals with rank of "num"
if (num == "best" | num == "worst") num <- 1
hosp <- lapply(by_state, function(x) as.character( x[num , 1]) )
# return data frame with hospital of specified rank in each state
data.frame(HOSPITAL = unlist(hosp, use.names = FALSE), STATE = names(hosp))
}
rm(list=ls())
rankall <- function(outcome, num = "best") {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that "outcome" arg is valid
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# check that "rank" arg is valid
if (!(num == "best" | num == "worst" | num > 0)) {
stop("invalid num")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to remove NAs, order by state and outcome and alphabetize hospitals
sub <- data[!is.na(data[ , outcome]), ]
# reverse outcome order for num = "worst"
if (num = "worst") {
sub <- sub[order(sub$State, -sub[ , outcome], sub$Hospital.Name) , ]
}
# reverse outcome order for num = "worst"
if (num == "worst") {
sub <- sub[order(sub$State, -sub[ , outcome], sub$Hospital.Name) , ]
}
rankall <- function(outcome, num = "best") {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that "outcome" arg is valid
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# check that "rank" arg is valid
if (!(num == "best" | num == "worst" | num > 0)) {
stop("invalid num")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to remove NAs, order by state and outcome and alphabetize hospitals
sub <- data[!is.na(data[ , outcome]), ]
# reverse outcome order for num = "worst"
if (num == "worst") {
sub <- sub[order(sub$State, -sub[ , outcome], sub$Hospital.Name) , ]
}
sub <- sub[order(sub$State, sub[ , outcome], sub$Hospital.Name) , ]
# subset to required columns; rename columns, add split (by state)
sub <- sub[ , c(2, 7, outcome)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
# get list of hospitals with rank of "num"
if (num == "best" | num == "worst") num <- 1
hosp <- lapply(by_state, function(x) as.character( x[num , 1]) )
# return data frame with hospital of specified rank in each state
data.frame(HOSPITAL = unlist(hosp, use.names = FALSE), STATE = names(hosp))
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
## Shows the hopital in each state that has the specified rank
## for the specified outcome;
## ties go to the hospital that comes first alphabetically
rankall <- function(outcome, num = "best") {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that "outcome" arg is valid
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# check that "rank" arg is valid
if (!(num == "best" | num == "worst" | num > 0)) {
stop("invalid num")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to remove NAs, order by state and outcome and alphabetize hospitals
sub <- data[!is.na(data[ , outcome]), ]
# reverse outcome order for num = "worst"
#        if (num == "worst") {
#                sub <- sub[order(sub$State, -sub[ , outcome], sub$Hospital.Name) , ]
#        }
sub <- sub[order(sub$State, sub[ , outcome], sub$Hospital.Name) , ]
# subset to required columns; rename columns, add split (by state)
sub <- sub[ , c(2, 7, outcome)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
# get list of hospitals with rank of "num"
if (num == "best" | num == "worst") num <- 1
hosp <- lapply(by_state, function(x) as.character( x[num , 1]) )
# return data frame with hospital of specified rank in each state
data.frame(HOSPITAL = unlist(hosp, use.names = FALSE), STATE = names(hosp))
}
tail(rankall("pneumonia", "worst"), 3)
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# subset to remove NAs, sort by outcome and alphabetize data
sub <- data[!is.na(data[ , 11]), ]
sub <- sub[order(sub[ , 7], -sub[ , 11], sub$Hospital.Name) , ]
sub <- sub[ , c(2, 7, 11)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
rm(list=ls())
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# subset to remove NAs, sort by outcome and alphabetize data
sub <- data[!is.na(data[ , 23]), ]
sub <- sub[order(sub[ , 7], -sub[ , 23], sub$Hospital.Name) , ]
sub <- sub[ , c(2, 7, 23)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
hosp <- lapply(by_state, function(x) as.character( x[1 , 1]) )
by_state
x <- 1:50
tail(x)
tail(x, 3)
rm(list=ls())
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# subset to remove NAs, sort by outcome and alphabetize data
sub <- data[!is.na(data[ , 23]), ]
sub <- sub[order(sub[ , 7], -sub[ , 23], sub$Hospital.Name) , ]
sub <- sub[ , c(2, 7, 23)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
num <- "worst"
if (num == "best" | num == "worst") num <- 1
hosp <- lapply(by_state, function(x) as.character( x[num , 1]) )
hosp
## Shows the hopital in each state that has the specified rank
## for the specified outcome;
## ties go to the hospital that comes first alphabetically
rankall <- function(outcome, num = "best") {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that "outcome" arg is valid
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# check that "rank" arg is valid
if (!(num == "best" | num == "worst" | num > 0)) {
stop("invalid num")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to remove NAs, order by state and outcome and alphabetize hospitals
sub <- data[!is.na(data[ , outcome]), ]
# reverse outcome order for num = "worst"
if (num == "worst") {
sub <- sub[order(sub$State, -sub[ , outcome], sub$Hospital.Name) , ]
}
else {
sub <- sub[order(sub$State, sub[ , outcome], sub$Hospital.Name) , ]
}
# subset to required columns; rename columns, add split (by state)
sub <- sub[ , c(2, 7, outcome)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
# get list of hospitals with rank of "num"
if (num == "best" | num == "worst") num <- 1
hosp <- lapply(by_state, function(x) as.character( x[num , 1]) )
# return data frame with hospital of specified rank in each state
data.frame(HOSPITAL = unlist(hosp, use.names = FALSE), STATE = names(hosp))
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "best"), 3)
rm(list=ls())
## Shows the hopital in each state that has the specified rank
## for the specified outcome;
## ties go to the hospital that comes first alphabetically
rankall <- function(outcome, num = "best") {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that "outcome" arg is valid
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# check that "rank" arg is valid
if (!(num == "best" | num == "worst" | num > 0)) {
stop("invalid num")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to remove NAs, order by state and outcome and alphabetize hospitals
sub <- data[!is.na(data[ , outcome]), ]
# reverse outcome order for num = "worst"
if (num == "worst") {
sub <- sub[order(sub$State, -sub[ , outcome], sub$Hospital.Name) , ]
}
else {
sub <- sub[order(sub$State, sub[ , outcome], sub$Hospital.Name) , ]
}
# subset to required columns; rename columns, add split (by state)
sub <- sub[ , c(2, 7, outcome)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
# get list of hospitals with rank of "num"
if (num == "best" | num == "worst") num <- 1
hosp <- lapply(by_state, function(x) as.character( x[num , 1]) )
# return data frame with hospital of specified rank in each state
data.frame(HOSPITAL = unlist(hosp, use.names = FALSE), STATE = names(hosp))
}
best("SC", "heart attack")
## Shows the hopital in the specified state that has the specified rank
## for the specified outcome;
## ties go to the hospital that comes first alphabetically
rankhospital <- function(state, outcome, num) {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that "state" and "outcome" args are valid
ST <- which(data$State == state)
if (sum(ST) < 1) {
stop("invalid state")
}
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to state, remove NAs, sort by outcome and alphabetize data
sub <- data[data$State == state , ]
sub <- sub[!is.na(sub[ , outcome]), ]
sub <- sub[order(sub[ , outcome], sub$Hospital.Name) , ]
# add "rank" to "sub" data frame
sub$rank <- 1:nrow(sub)
# check that "rank" arg is valid
if (!(num == "best" | num == "worst" |
(num > 0 & num < nrow(sub)))) {
return(NA)
}
# return hospital name in chosen state with specified rank
if (num == "best") {
num <- 1
}
if (num == "worst") {
num <- max(sub$rank)
}
as.character(sub[num,2])
}
## Shows the best hopital in a state for a given outcome; ties go to the
## hospital that comes first alphabetically
best <- function(state, outcome) {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that state and outcome are valid
ST <- which(data$State == state)
if (sum(ST) < 1) {
stop("invalid state")
}
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to state, remove NAs, sort by outcome and alphabetize data
sub <- data[data$State == state , ]
sub <- sub[!is.na(sub[ , outcome]) , ]
sub <- sub[order(sub[ , outcome], sub$Hospital.Name) , ]
# return hospital name in that state with lowest 30-day death rate
as.character(sub[1,2])
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
## Shows the hopital in each state that has the specified rank
## for the specified outcome;
## ties go to the hospital that comes first alphabetically
rankall <- function(outcome, num = "best") {
# read in data
data <- read.csv("../assign_3_data/outcome-of-care-measures.csv",
na.strings = "Not Available")
# check that "outcome" arg is valid
if (!(outcome == "heart attack" | outcome == "heart failure" |
outcome == "pneumonia")) {
stop("invalid outcome")
}
# check that "rank" arg is valid
if (!(num == "best" | num == "worst" | num > 0)) {
stop("invalid num")
}
# assign appropriate column numbers to 'outcome'
if (outcome == "heart attack")
outcome <- 11
if (outcome == "heart failure")
outcome <- 17
if (outcome == "pneumonia")
outcome <- 23
# subset to remove NAs, order by state and outcome and alphabetize hospitals
sub <- data[!is.na(data[ , outcome]), ]
# reverse outcome order for num = "worst"
if (num == "worst") {
sub <- sub[order(sub$State, -sub[ , outcome], sub$Hospital.Name) , ]
}
else {
sub <- sub[order(sub$State, sub[ , outcome], sub$Hospital.Name) , ]
}
# subset to required columns; rename columns, add split (by state)
sub <- sub[ , c(2, 7, outcome)]
names(sub) <- c("hospital","st", "rate")
by_state <- split(sub, sub$st)
# get list of hospitals with rank of "num"
if (num == "best" | num == "worst") num <- 1
hosp <- lapply(by_state, function(x) as.character( x[num , 1]) )
# return data frame with hospital of specified rank in each state
data.frame(hospital = unlist(hosp, use.names = FALSE), state = names(hosp))
}
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
